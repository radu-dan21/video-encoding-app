# Generated by Django 4.2 on 2023-10-08 18:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_jsonform.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseGraph',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('file_path', models.CharField(blank=True, default='', validators=[django.core.validators.RegexValidator(regex='^(.+)\\.html')])),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComparisonFilter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('ffmpeg_args', django_jsonform.models.fields.ArrayField(base_field=models.CharField(max_length=1999), help_text='Arguments that will be passed to ffmpeg for metric computation.', size=None)),
                ('description', models.TextField(blank=True)),
                ('regex_for_value_extraction', models.CharField(help_text="Regular expression that will be used for extracting the quality score (float) from ffmpeg's output. Must include a capture group with the name 'value'.", max_length=1999)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Encoder',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('ffmpeg_args', django_jsonform.models.fields.ArrayField(base_field=models.CharField(max_length=1999), size=None)),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InformationFilter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('ffmpeg_args', django_jsonform.models.fields.ArrayField(base_field=models.CharField(max_length=1999), help_text='Arguments that will be passed to ffmpeg for metric computation.', size=None)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OriginalVideoFile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('ffprobe_info', django_jsonform.models.fields.JSONField(blank=True, help_text='Video metadata extracted with ffprobe.', null=True)),
                ('file_name', models.CharField(blank=True, default='', validators=[django.core.validators.RegexValidator(regex='^(.+)\\.(.){1,5}')])),
                ('status', models.CharField(choices=[('C', 'Copying video file'), ('R', 'Ready'), ('I', 'Computing original video metrics'), ('E', 'Encoding child videos'), ('M', 'Computing encoded video(s) metrics'), ('D', 'Done'), ('F', 'Failed')], default='R', max_length=1)),
                ('error_message', models.CharField(blank=True, default='', max_length=1024)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EncodingTimeGraph',
            fields=[
                ('basegraph_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.basegraph')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
            bases=('entities.basegraph',),
        ),
        migrations.CreateModel(
            name='InformationFilterResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('output', models.TextField(blank=True, default='')),
                ('compute_time', models.FloatField(null=True)),
                ('information_filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='entities.informationfilter')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='info_filter_results', to='entities.originalvideofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EncoderSetting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('extra_ffmpeg_args', django_jsonform.models.fields.ArrayField(base_field=models.CharField(max_length=1999), size=None)),
                ('video_extension', models.CharField(blank=True, choices=[('', '---'), ('webm', 'webm'), ('mkv', 'mkv'), ('flv', 'flv'), ('vob', 'vob'), ('ogv', 'ogv'), ('ogg', 'ogg'), ('rrc', 'rrc'), ('gifv', 'gifv'), ('mng', 'mng'), ('mov', 'mov'), ('avi', 'avi'), ('qt', 'qt'), ('wmv', 'wmv'), ('yuv', 'yuv'), ('y4m', 'y4m'), ('rm', 'rm'), ('asf', 'asf'), ('amv', 'amv'), ('mp4', 'mp4'), ('m4p', 'm4p'), ('m4v', 'm4v'), ('mpg', 'mpg'), ('mp2', 'mp2'), ('mpeg', 'mpeg'), ('mpe', 'mpe'), ('mpv', 'mpv'), ('m4v', 'm4v'), ('svi', 'svi'), ('3gp', '3gp'), ('3g2', '3g2'), ('mxf', 'mxf'), ('roq', 'roq'), ('nsv', 'nsv'), ('flv', 'flv'), ('f4v', 'f4v'), ('f4p', 'f4p'), ('f4a', 'f4a'), ('f4b', 'f4b'), ('mod', 'mod')], default='', help_text="If blank, the original video's extension will be used for the encoded videos", max_length=5)),
                ('encoder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='entities.encoder')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EncodedVideoFile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('ffprobe_info', django_jsonform.models.fields.JSONField(blank=True, help_text='Video metadata extracted with ffprobe.', null=True)),
                ('file_name', models.CharField(blank=True, default='', validators=[django.core.validators.RegexValidator(regex='^(.+)\\.(.){1,5}')])),
                ('encoding_time', models.FloatField(null=True)),
                ('encoder_setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='encoded_video_files', to='entities.encodersetting')),
                ('original_video_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='encoded_video_files', to='entities.originalvideofile')),
            ],
            options={
                'unique_together': {('original_video_file', 'encoder_setting')},
            },
        ),
        migrations.CreateModel(
            name='DecodedVideoFile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('ffprobe_info', django_jsonform.models.fields.JSONField(blank=True, help_text='Video metadata extracted with ffprobe.', null=True)),
                ('file_name', models.CharField(blank=True, default='', validators=[django.core.validators.RegexValidator(regex='^(.+)\\.(.){1,5}')])),
                ('decoding_time', models.FloatField(null=True)),
                ('encoded_video_file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='decoded_video_file', to='entities.encodedvideofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComparisonFilterResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('output', models.TextField(blank=True, default='')),
                ('compute_time', models.FloatField(null=True)),
                ('value', models.FloatField(null=True)),
                ('comparison_filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='entities.comparisonfilter')),
                ('reference_video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparison_filter_results', to='entities.originalvideofile')),
                ('video_to_compare', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filter_results', to='entities.decodedvideofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BDMetric',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('bd_rate', models.FloatField()),
                ('bd_metric', models.FloatField()),
                ('comparison_filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.comparisonfilter')),
                ('original_video_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bd_metrics', to='entities.originalvideofile')),
                ('reference_encoder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_metrics', to='entities.encoder')),
                ('test_encoder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_metrics', to='entities.encoder')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='basegraph',
            name='original_video_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.originalvideofile'),
        ),
        migrations.CreateModel(
            name='MetricGraph',
            fields=[
                ('basegraph_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.basegraph')),
                ('comparison_filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.comparisonfilter')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
            bases=('entities.basegraph',),
        ),
    ]
