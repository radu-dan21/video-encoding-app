# Generated by Django 4.2 on 2023-10-08 18:14

import itertools

from django.db import migrations


def forwards(apps, schema_editor):
    Encoder = apps.get_model("entities", "Encoder")
    InformationFilter = apps.get_model("entities", "InformationFilter")
    ComparisonFilter = apps.get_model("entities", "ComparisonFilter")

    av1, _created = Encoder.objects.get_or_create(
        name="SVT-AV1",
        ffmpeg_args=["-c:v", "libsvtav1"],
    )
    hevc, _created = Encoder.objects.get_or_create(
        name="x265",
        ffmpeg_args=["-c:v", "libx265"],
    )
    avc, _created = Encoder.objects.get_or_create(
        name="x264",
        ffmpeg_args=["-c:v", "libx264"],
    )

    encoder_settings(apps, av1, hevc, avc)

    InformationFilter.objects.get_or_create(
        name="SITI",
        ffmpeg_args=["-vf", "siti=print_summary=1"],
        description=(
            "SI (Spatial information) -> average level of detail in each video frame.\n"
            "TI (Temporal information) -> the average level of detail change between 2 consecutive frames.\n"
        ),
    )

    ComparisonFilter.objects.get_or_create(
        name="PSNR",
        ffmpeg_args=["-filter_complex", "psnr"],
        description="Peak signal-to-noise ratio.",
        regex_for_value_extraction='.+average:(?P<value>[^ ]+) .+',
    )
    ComparisonFilter.objects.get_or_create(
        name="VMAF",
        ffmpeg_args=["-lavfi", "libvmaf"],
        description="Video Multi-method Assessment Fusion.",
        regex_for_value_extraction=r'.*VMAF score: (?P<value>[0-9.]+).*',
    )


def encoder_settings(apps, av1, hevc, avc):
    EncoderSetting = apps.get_model("entities", "EncoderSetting")

    encoder_settings = {
        'SVT-AV1': {
            'ENCODER_OBJ': av1,
            'CRF_RANGE': (1, 63),
            'CRF_SAMPLE_COUNT': 4,
            'PRESETS': ('5', ),
        },
        'x265': {
            'ENCODER_OBJ': hevc,
            'CRF_RANGE': (0, 51),
            'CRF_SAMPLE_COUNT': 4,
            'PRESETS': ('slow', ),
        },
        'x264': {
            'ENCODER_OBJ': avc,
            'CRF_RANGE': (10, 50),
            'CRF_SAMPLE_COUNT': 4,
            'PRESETS': ('slow', ),
        }
    }

    for encoder, encoder_params in encoder_settings.items():
        crf_sample_count = encoder_params['CRF_SAMPLE_COUNT']
        crf_range = encoder_params['CRF_RANGE']
        crf_list = []
        lowest, highest = crf_range[0], crf_range[1]
        crf_list.append(lowest)

        step = (highest - lowest) / crf_sample_count

        for i in range(1, crf_sample_count - 1):
            crf_value = int(lowest + i * step)
            crf_list.append(min(crf_value, highest))

        crf_list.append(highest)
        crf_list = list(set(crf_list))
        crf_list.sort()

        for preset, crf in itertools.product(encoder_params['PRESETS'], crf_list):
            EncoderSetting.objects.get_or_create(
                name=f'{encoder} - preset {preset} - CRF {crf}',
                video_extension='mkv',
                encoder=encoder_params['ENCODER_OBJ'],
                extra_ffmpeg_args=f'-preset {preset} -crf {crf} -tune psnr'.split(' ')
            )


class Migration(migrations.Migration):

    dependencies = [
        ('entities', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(forwards, migrations.RunPython.noop),
    ]
